'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();

var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _reactRouter = require('react-router');
var _reactBootstrapTableMin = require('react-bootstrap-table/dist/react-bootstrap-table.min.css');var _reactBootstrapTableMin2 = _interopRequireDefault(_reactBootstrapTableMin);
var _reactBootstrapTable = require('react-bootstrap-table');
var _reactBootstrap = require('react-bootstrap');
var _underscore = require('underscore');var _underscore2 = _interopRequireDefault(_underscore);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} /* global Plotly */var


PortfolioGraphs = function (_React$Component) {_inherits(PortfolioGraphs, _React$Component);
    function PortfolioGraphs(props) {_classCallCheck(this, PortfolioGraphs);var _this = _possibleConstructorReturn(this, (PortfolioGraphs.__proto__ || Object.getPrototypeOf(PortfolioGraphs)).call(this,
        props));

        _this.changeofGraphCoordinates = _this.changeofGraphCoordinates.bind(_this);return _this;
    }_createClass(PortfolioGraphs, [{ key: 'changeofGraphCoordinates', value: function changeofGraphCoordinates()

        {
            console.log("change of graph coordinates");
            Plotly.redraw('plot1');
        } }, { key: 'componentDidMount', value: function componentDidMount()


        {
            var self = this;

            Plotly.newPlot(this.props.name, [{
                x: this.props.x1,
                y: this.props.y1,
                type: this.props.type,
                line: {
                    color: 'rgb(95, 177, 253)',
                    width: 1 },

                name: this.props.legendName1 },
            {
                x: this.props.x2,
                y: this.props.y2,
                type: this.props.type,
                line: {
                    color: 'rgb(196,17,17)',
                    width: 1 },

                name: this.props.legendName2 }],
            {
                margin: {
                    t: 60, r: 10, l: 60, b: 0 },

                showlegend: true,
                legend: {
                    orientation: "h",
                    xanchor: "center",
                    x: '0.5',
                    y: '-0.2' },

                font: {
                    family: 'Arial, Helvetica, sans-serif',
                    size: 12,
                    color: '#333333' },

                title: this.props.title,
                width: window.innerWidth / 3.5,
                height: 300,
                xaxis: {
                    type: 'date',
                    gridcolor: 'transparent' } },

            {
                displayModeBar: false });


            window.onresize = function () {
                Plotly.Plots.resize(self.props.name);
            };

        } }, { key: 'onSelectMenuItem', value: function onSelectMenuItem(


        index) {

        } }, { key: 'render', value: function render()




        {

            var plotStyle = {
                /*boxShadow: '0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23)'
                              border: '1px solid #ddd',
                              borderRadius: "0px 0px 4px 4px",
                              borderWidth: '0px 1px 1px 1px'*/};

            return (
                _react2.default.createElement('div', { style: plotStyle, id: this.props.name }));

        } }]);return PortfolioGraphs;}(_react2.default.Component);exports.default =


PortfolioGraphs;